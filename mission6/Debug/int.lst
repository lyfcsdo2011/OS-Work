     1                                  ;***
     2                                  ;
     3                                  ; Copyright (c) 2008 北京英真时代科技有限公司。保留所有权利。
     4                                  ;
     5                                  ; 只有您接受 EOS 核心源代码协议（参见 License.txt）中的条款才能使用这些代码。
     6                                  ; 如果您不接受，不能使用这些代码。
     7                                  ;
     8                                  ; 文件名: int.asm
     9                                  ;
    10                                  ; 描述: 
    11                                  ;
    12                                  ; 
    13                                  ;
    14                                  ;*******************************************************************************/
    15                                  
    16                                  
    17                                  ;
    18                                  ; 导出符号
    19                                  ;
    20                                  global _KeIsrStack
    21                                  global _KiIntNesting
    22                                  
    23                                  global _KiInitializeInterrupt
    24                                  global _KeGetIntNesting
    25                                  global _KeEnableInterrupts
    26                                  
    27                                  ;
    28                                  ; 导入符号
    29                                  ;
    30                                  extern _KiDispatchException
    31                                  extern _KiDispatchInterrupt
    32                                  extern _PspSelectNextThread
    33                                  
    34                                  ;
    35                                  ; CONTEXT 结构体的大小以及各个域的偏移量
    36                                  ;
    37                                  CONTEXT_SIZE	equ		64
    38                                  
    39                                  OFF_EAX			equ		0 * 4
    40                                  OFF_ECX			equ		1 * 4
    41                                  OFF_EDX			equ		2 * 4
    42                                  OFF_EBX			equ		3 * 4
    43                                  OFF_ESP			equ		4 * 4
    44                                  OFF_EBP			equ		5 * 4
    45                                  OFF_ESI			equ		6 * 4
    46                                  OFF_EDI			equ		7 * 4
    47                                  OFF_EIP			equ		8 * 4
    48                                  OFF_EFLAGS		equ		9 * 4
    49                                  OFF_CS			equ		10 * 4
    50                                  OFF_SS			equ		11 * 4
    51                                  OFF_DS			equ		12 * 4
    52                                  OFF_ES			equ		13 * 4
    53                                  OFF_FS			equ		14 * 4
    54                                  OFF_GS			equ		15 * 4
    55                                  
    56                                  ;
    57                                  ; 用于设置中断描述符的宏，三个参数分别是 中断描述符表地址、中断号、中断处理程序入口地址
    58                                  ;
    59                                  %macro SET_INT_DESC 3
    60                                  	push eax
    61                                  	mov eax, %3
    62                                  	mov word [%1 + %2 * 8 + 0], ax
    63                                  	mov word [%1 + %2 * 8 + 2], 0x0008
    64                                  	mov byte [%1 + %2 * 8 + 5], 0x8E
    65                                  	shr eax, 16
    66                                  	mov word [%1 + %2 * 8 + 6], ax
    67                                  	pop eax
    68                                  %endmacro
    69                                  
    70                                  ;
    71                                  ; 数据节
    72                                  ;
    73                                  [section .data]
    74                                  
    75 00000000 00<rept>                _Idt times 2048				db	0				; 中断描述符表
    76 00000800 01000000                _KiIntNesting				dd	1				; 系统启动时，KiSystemStartup在ISR栈中执行。
    77 00000804 00000000                _KeIsrStack					dd	0				; ISR栈指针
    78 00000808 00000000                _IntNumber					dd	0				; 中断号
    79 0000080C 00000000                _ErrorCode					dd	0				; 异常错误码
    80 00000810 00000000                _ContextPtr					dd	0				; 当前线程 CONTEXT 的指针
    81 00000814 00000000                _RetAddress					dd	0				; 返回地址
    82 00000818 00000000                _EaxValue					dd	0				; 用于暂存 EAX
    83 0000081C 00000000                _EbxValue					dd	0				; 用于暂存 EBX
    84                                  
    85                                  ;
    86                                  ; 代码节
    87                                  ;
    88                                  [section .text]
    89                                  
    90                                  _KiInitializeInterrupt:
    91                                  ;{
    92 00000000 55                      	push ebp
    93 00000001 89E5                    	mov ebp, esp
    94                                  
    95                                  	;
    96                                  	; 初始化中断描述符表的所有表项为默认值
    97                                  	;
    98 00000003 31FF                    	xor edi, edi
    99                                  .LOOP:
   100                                  	SET_INT_DESC _Idt, edi, Exp_3
   101 00000005 50                  <1>  push eax
   102 00000006 B8[87040000]        <1>  mov eax, %3
   103 0000000B 668904FD[00000000]  <1>  mov word [%1 + %2 * 8 + 0], ax
   104 00000013 66C704FD[02000000]- <1>  mov word [%1 + %2 * 8 + 2], 0x0008
   105 0000001B 0800                <1>
   106 0000001D C604FD[05000000]8E  <1>  mov byte [%1 + %2 * 8 + 5], 0x8E
   107 00000025 C1E810              <1>  shr eax, 16
   108 00000028 668904FD[06000000]  <1>  mov word [%1 + %2 * 8 + 6], ax
   109 00000030 58                  <1>  pop eax
   110 00000031 47                      	inc edi
   111 00000032 81FF00010000            	cmp edi, 256
   112 00000038 0F82C7FFFFFF            	jb .LOOP
   113                                  	
   114                                  	;
   115                                  	; 设置中断描述符表中要用到的表项
   116                                  	;
   117                                  	SET_INT_DESC _Idt, 0, Exp_0
   118 0000003E 50                  <1>  push eax
   119 0000003F B8[55040000]        <1>  mov eax, %3
   120 00000044 66A3[00000000]      <1>  mov word [%1 + %2 * 8 + 0], ax
   121 0000004A 66C705[02000000]08- <1>  mov word [%1 + %2 * 8 + 2], 0x0008
   122 00000052 00                  <1>
   123 00000053 C605[05000000]8E    <1>  mov byte [%1 + %2 * 8 + 5], 0x8E
   124 0000005A C1E810              <1>  shr eax, 16
   125 0000005D 66A3[06000000]      <1>  mov word [%1 + %2 * 8 + 6], ax
   126 00000063 58                  <1>  pop eax
   127                                  	SET_INT_DESC _Idt, 1, Exp_1
   128 00000064 50                  <1>  push eax
   129 00000065 B8[6E040000]        <1>  mov eax, %3
   130 0000006A 66A3[08000000]      <1>  mov word [%1 + %2 * 8 + 0], ax
   131 00000070 66C705[0A000000]08- <1>  mov word [%1 + %2 * 8 + 2], 0x0008
   132 00000078 00                  <1>
   133 00000079 C605[0D000000]8E    <1>  mov byte [%1 + %2 * 8 + 5], 0x8E
   134 00000080 C1E810              <1>  shr eax, 16
   135 00000083 66A3[0E000000]      <1>  mov word [%1 + %2 * 8 + 6], ax
   136 00000089 58                  <1>  pop eax
   137                                  	SET_INT_DESC _Idt, 3, Exp_3
   138 0000008A 50                  <1>  push eax
   139 0000008B B8[87040000]        <1>  mov eax, %3
   140 00000090 66A3[18000000]      <1>  mov word [%1 + %2 * 8 + 0], ax
   141 00000096 66C705[1A000000]08- <1>  mov word [%1 + %2 * 8 + 2], 0x0008
   142 0000009E 00                  <1>
   143 0000009F C605[1D000000]8E    <1>  mov byte [%1 + %2 * 8 + 5], 0x8E
   144 000000A6 C1E810              <1>  shr eax, 16
   145 000000A9 66A3[1E000000]      <1>  mov word [%1 + %2 * 8 + 6], ax
   146 000000AF 58                  <1>  pop eax
   147                                  	SET_INT_DESC _Idt, 4, Exp_4
   148 000000B0 50                  <1>  push eax
   149 000000B1 B8[A0040000]        <1>  mov eax, %3
   150 000000B6 66A3[20000000]      <1>  mov word [%1 + %2 * 8 + 0], ax
   151 000000BC 66C705[22000000]08- <1>  mov word [%1 + %2 * 8 + 2], 0x0008
   152 000000C4 00                  <1>
   153 000000C5 C605[25000000]8E    <1>  mov byte [%1 + %2 * 8 + 5], 0x8E
   154 000000CC C1E810              <1>  shr eax, 16
   155 000000CF 66A3[26000000]      <1>  mov word [%1 + %2 * 8 + 6], ax
   156 000000D5 58                  <1>  pop eax
   157                                  	SET_INT_DESC _Idt, 5, Exp_5
   158 000000D6 50                  <1>  push eax
   159 000000D7 B8[B9040000]        <1>  mov eax, %3
   160 000000DC 66A3[28000000]      <1>  mov word [%1 + %2 * 8 + 0], ax
   161 000000E2 66C705[2A000000]08- <1>  mov word [%1 + %2 * 8 + 2], 0x0008
   162 000000EA 00                  <1>
   163 000000EB C605[2D000000]8E    <1>  mov byte [%1 + %2 * 8 + 5], 0x8E
   164 000000F2 C1E810              <1>  shr eax, 16
   165 000000F5 66A3[2E000000]      <1>  mov word [%1 + %2 * 8 + 6], ax
   166 000000FB 58                  <1>  pop eax
   167                                  	SET_INT_DESC _Idt, 6, Exp_6
   168 000000FC 50                  <1>  push eax
   169 000000FD B8[D2040000]        <1>  mov eax, %3
   170 00000102 66A3[30000000]      <1>  mov word [%1 + %2 * 8 + 0], ax
   171 00000108 66C705[32000000]08- <1>  mov word [%1 + %2 * 8 + 2], 0x0008
   172 00000110 00                  <1>
   173 00000111 C605[35000000]8E    <1>  mov byte [%1 + %2 * 8 + 5], 0x8E
   174 00000118 C1E810              <1>  shr eax, 16
   175 0000011B 66A3[36000000]      <1>  mov word [%1 + %2 * 8 + 6], ax
   176 00000121 58                  <1>  pop eax
   177                                  	SET_INT_DESC _Idt, 7, Exp_7
   178 00000122 50                  <1>  push eax
   179 00000123 B8[EB040000]        <1>  mov eax, %3
   180 00000128 66A3[38000000]      <1>  mov word [%1 + %2 * 8 + 0], ax
   181 0000012E 66C705[3A000000]08- <1>  mov word [%1 + %2 * 8 + 2], 0x0008
   182 00000136 00                  <1>
   183 00000137 C605[3D000000]8E    <1>  mov byte [%1 + %2 * 8 + 5], 0x8E
   184 0000013E C1E810              <1>  shr eax, 16
   185 00000141 66A3[3E000000]      <1>  mov word [%1 + %2 * 8 + 6], ax
   186 00000147 58                  <1>  pop eax
   187                                  	SET_INT_DESC _Idt, 8, Exp_8
   188 00000148 50                  <1>  push eax
   189 00000149 B8[04050000]        <1>  mov eax, %3
   190 0000014E 66A3[40000000]      <1>  mov word [%1 + %2 * 8 + 0], ax
   191 00000154 66C705[42000000]08- <1>  mov word [%1 + %2 * 8 + 2], 0x0008
   192 0000015C 00                  <1>
   193 0000015D C605[45000000]8E    <1>  mov byte [%1 + %2 * 8 + 5], 0x8E
   194 00000164 C1E810              <1>  shr eax, 16
   195 00000167 66A3[46000000]      <1>  mov word [%1 + %2 * 8 + 6], ax
   196 0000016D 58                  <1>  pop eax
   197                                  	SET_INT_DESC _Idt, 9, Exp_9
   198 0000016E 50                  <1>  push eax
   199 0000016F B8[19050000]        <1>  mov eax, %3
   200 00000174 66A3[48000000]      <1>  mov word [%1 + %2 * 8 + 0], ax
   201 0000017A 66C705[4A000000]08- <1>  mov word [%1 + %2 * 8 + 2], 0x0008
   202 00000182 00                  <1>
   203 00000183 C605[4D000000]8E    <1>  mov byte [%1 + %2 * 8 + 5], 0x8E
   204 0000018A C1E810              <1>  shr eax, 16
   205 0000018D 66A3[4E000000]      <1>  mov word [%1 + %2 * 8 + 6], ax
   206 00000193 58                  <1>  pop eax
   207                                  	SET_INT_DESC _Idt, 10, Exp_10
   208 00000194 50                  <1>  push eax
   209 00000195 B8[32050000]        <1>  mov eax, %3
   210 0000019A 66A3[50000000]      <1>  mov word [%1 + %2 * 8 + 0], ax
   211 000001A0 66C705[52000000]08- <1>  mov word [%1 + %2 * 8 + 2], 0x0008
   212 000001A8 00                  <1>
   213 000001A9 C605[55000000]8E    <1>  mov byte [%1 + %2 * 8 + 5], 0x8E
   214 000001B0 C1E810              <1>  shr eax, 16
   215 000001B3 66A3[56000000]      <1>  mov word [%1 + %2 * 8 + 6], ax
   216 000001B9 58                  <1>  pop eax
   217                                  	SET_INT_DESC _Idt, 11, Exp_11
   218 000001BA 50                  <1>  push eax
   219 000001BB B8[47050000]        <1>  mov eax, %3
   220 000001C0 66A3[58000000]      <1>  mov word [%1 + %2 * 8 + 0], ax
   221 000001C6 66C705[5A000000]08- <1>  mov word [%1 + %2 * 8 + 2], 0x0008
   222 000001CE 00                  <1>
   223 000001CF C605[5D000000]8E    <1>  mov byte [%1 + %2 * 8 + 5], 0x8E
   224 000001D6 C1E810              <1>  shr eax, 16
   225 000001D9 66A3[5E000000]      <1>  mov word [%1 + %2 * 8 + 6], ax
   226 000001DF 58                  <1>  pop eax
   227                                  	SET_INT_DESC _Idt, 12, Exp_12
   228 000001E0 50                  <1>  push eax
   229 000001E1 B8[5C050000]        <1>  mov eax, %3
   230 000001E6 66A3[60000000]      <1>  mov word [%1 + %2 * 8 + 0], ax
   231 000001EC 66C705[62000000]08- <1>  mov word [%1 + %2 * 8 + 2], 0x0008
   232 000001F4 00                  <1>
   233 000001F5 C605[65000000]8E    <1>  mov byte [%1 + %2 * 8 + 5], 0x8E
   234 000001FC C1E810              <1>  shr eax, 16
   235 000001FF 66A3[66000000]      <1>  mov word [%1 + %2 * 8 + 6], ax
   236 00000205 58                  <1>  pop eax
   237                                  	SET_INT_DESC _Idt, 13, Exp_13
   238 00000206 50                  <1>  push eax
   239 00000207 B8[71050000]        <1>  mov eax, %3
   240 0000020C 66A3[68000000]      <1>  mov word [%1 + %2 * 8 + 0], ax
   241 00000212 66C705[6A000000]08- <1>  mov word [%1 + %2 * 8 + 2], 0x0008
   242 0000021A 00                  <1>
   243 0000021B C605[6D000000]8E    <1>  mov byte [%1 + %2 * 8 + 5], 0x8E
   244 00000222 C1E810              <1>  shr eax, 16
   245 00000225 66A3[6E000000]      <1>  mov word [%1 + %2 * 8 + 6], ax
   246 0000022B 58                  <1>  pop eax
   247                                  	SET_INT_DESC _Idt, 14, Exp_14
   248 0000022C 50                  <1>  push eax
   249 0000022D B8[86050000]        <1>  mov eax, %3
   250 00000232 66A3[70000000]      <1>  mov word [%1 + %2 * 8 + 0], ax
   251 00000238 66C705[72000000]08- <1>  mov word [%1 + %2 * 8 + 2], 0x0008
   252 00000240 00                  <1>
   253 00000241 C605[75000000]8E    <1>  mov byte [%1 + %2 * 8 + 5], 0x8E
   254 00000248 C1E810              <1>  shr eax, 16
   255 0000024B 66A3[76000000]      <1>  mov word [%1 + %2 * 8 + 6], ax
   256 00000251 58                  <1>  pop eax
   257                                  	SET_INT_DESC _Idt, 16, Exp_16
   258 00000252 50                  <1>  push eax
   259 00000253 B8[9B050000]        <1>  mov eax, %3
   260 00000258 66A3[80000000]      <1>  mov word [%1 + %2 * 8 + 0], ax
   261 0000025E 66C705[82000000]08- <1>  mov word [%1 + %2 * 8 + 2], 0x0008
   262 00000266 00                  <1>
   263 00000267 C605[85000000]8E    <1>  mov byte [%1 + %2 * 8 + 5], 0x8E
   264 0000026E C1E810              <1>  shr eax, 16
   265 00000271 66A3[86000000]      <1>  mov word [%1 + %2 * 8 + 6], ax
   266 00000277 58                  <1>  pop eax
   267                                  	
   268                                  	SET_INT_DESC _Idt, 32, Int_32
   269 00000278 50                  <1>  push eax
   270 00000279 B8[B4050000]        <1>  mov eax, %3
   271 0000027E 66A3[00010000]      <1>  mov word [%1 + %2 * 8 + 0], ax
   272 00000284 66C705[02010000]08- <1>  mov word [%1 + %2 * 8 + 2], 0x0008
   273 0000028C 00                  <1>
   274 0000028D C605[05010000]8E    <1>  mov byte [%1 + %2 * 8 + 5], 0x8E
   275 00000294 C1E810              <1>  shr eax, 16
   276 00000297 66A3[06010000]      <1>  mov word [%1 + %2 * 8 + 6], ax
   277 0000029D 58                  <1>  pop eax
   278                                  	SET_INT_DESC _Idt, 33, Int_33
   279 0000029E 50                  <1>  push eax
   280 0000029F B8[C3050000]        <1>  mov eax, %3
   281 000002A4 66A3[08010000]      <1>  mov word [%1 + %2 * 8 + 0], ax
   282 000002AA 66C705[0A010000]08- <1>  mov word [%1 + %2 * 8 + 2], 0x0008
   283 000002B2 00                  <1>
   284 000002B3 C605[0D010000]8E    <1>  mov byte [%1 + %2 * 8 + 5], 0x8E
   285 000002BA C1E810              <1>  shr eax, 16
   286 000002BD 66A3[0E010000]      <1>  mov word [%1 + %2 * 8 + 6], ax
   287 000002C3 58                  <1>  pop eax
   288                                  	SET_INT_DESC _Idt, 35, Int_35
   289 000002C4 50                  <1>  push eax
   290 000002C5 B8[D2050000]        <1>  mov eax, %3
   291 000002CA 66A3[18010000]      <1>  mov word [%1 + %2 * 8 + 0], ax
   292 000002D0 66C705[1A010000]08- <1>  mov word [%1 + %2 * 8 + 2], 0x0008
   293 000002D8 00                  <1>
   294 000002D9 C605[1D010000]8E    <1>  mov byte [%1 + %2 * 8 + 5], 0x8E
   295 000002E0 C1E810              <1>  shr eax, 16
   296 000002E3 66A3[1E010000]      <1>  mov word [%1 + %2 * 8 + 6], ax
   297 000002E9 58                  <1>  pop eax
   298                                  	SET_INT_DESC _Idt, 36, Int_36
   299 000002EA 50                  <1>  push eax
   300 000002EB B8[E1050000]        <1>  mov eax, %3
   301 000002F0 66A3[20010000]      <1>  mov word [%1 + %2 * 8 + 0], ax
   302 000002F6 66C705[22010000]08- <1>  mov word [%1 + %2 * 8 + 2], 0x0008
   303 000002FE 00                  <1>
   304 000002FF C605[25010000]8E    <1>  mov byte [%1 + %2 * 8 + 5], 0x8E
   305 00000306 C1E810              <1>  shr eax, 16
   306 00000309 66A3[26010000]      <1>  mov word [%1 + %2 * 8 + 6], ax
   307 0000030F 58                  <1>  pop eax
   308                                  	SET_INT_DESC _Idt, 37, Int_37
   309 00000310 50                  <1>  push eax
   310 00000311 B8[F0050000]        <1>  mov eax, %3
   311 00000316 66A3[28010000]      <1>  mov word [%1 + %2 * 8 + 0], ax
   312 0000031C 66C705[2A010000]08- <1>  mov word [%1 + %2 * 8 + 2], 0x0008
   313 00000324 00                  <1>
   314 00000325 C605[2D010000]8E    <1>  mov byte [%1 + %2 * 8 + 5], 0x8E
   315 0000032C C1E810              <1>  shr eax, 16
   316 0000032F 66A3[2E010000]      <1>  mov word [%1 + %2 * 8 + 6], ax
   317 00000335 58                  <1>  pop eax
   318                                  	SET_INT_DESC _Idt, 38, Int_38
   319 00000336 50                  <1>  push eax
   320 00000337 B8[FF050000]        <1>  mov eax, %3
   321 0000033C 66A3[30010000]      <1>  mov word [%1 + %2 * 8 + 0], ax
   322 00000342 66C705[32010000]08- <1>  mov word [%1 + %2 * 8 + 2], 0x0008
   323 0000034A 00                  <1>
   324 0000034B C605[35010000]8E    <1>  mov byte [%1 + %2 * 8 + 5], 0x8E
   325 00000352 C1E810              <1>  shr eax, 16
   326 00000355 66A3[36010000]      <1>  mov word [%1 + %2 * 8 + 6], ax
   327 0000035B 58                  <1>  pop eax
   328                                  	SET_INT_DESC _Idt, 39, Int_39
   329 0000035C 50                  <1>  push eax
   330 0000035D B8[0E060000]        <1>  mov eax, %3
   331 00000362 66A3[38010000]      <1>  mov word [%1 + %2 * 8 + 0], ax
   332 00000368 66C705[3A010000]08- <1>  mov word [%1 + %2 * 8 + 2], 0x0008
   333 00000370 00                  <1>
   334 00000371 C605[3D010000]8E    <1>  mov byte [%1 + %2 * 8 + 5], 0x8E
   335 00000378 C1E810              <1>  shr eax, 16
   336 0000037B 66A3[3E010000]      <1>  mov word [%1 + %2 * 8 + 6], ax
   337 00000381 58                  <1>  pop eax
   338                                  	SET_INT_DESC _Idt, 40, Int_40
   339 00000382 50                  <1>  push eax
   340 00000383 B8[1D060000]        <1>  mov eax, %3
   341 00000388 66A3[40010000]      <1>  mov word [%1 + %2 * 8 + 0], ax
   342 0000038E 66C705[42010000]08- <1>  mov word [%1 + %2 * 8 + 2], 0x0008
   343 00000396 00                  <1>
   344 00000397 C605[45010000]8E    <1>  mov byte [%1 + %2 * 8 + 5], 0x8E
   345 0000039E C1E810              <1>  shr eax, 16
   346 000003A1 66A3[46010000]      <1>  mov word [%1 + %2 * 8 + 6], ax
   347 000003A7 58                  <1>  pop eax
   348                                  	SET_INT_DESC _Idt, 44, Int_44
   349 000003A8 50                  <1>  push eax
   350 000003A9 B8[2C060000]        <1>  mov eax, %3
   351 000003AE 66A3[60010000]      <1>  mov word [%1 + %2 * 8 + 0], ax
   352 000003B4 66C705[62010000]08- <1>  mov word [%1 + %2 * 8 + 2], 0x0008
   353 000003BC 00                  <1>
   354 000003BD C605[65010000]8E    <1>  mov byte [%1 + %2 * 8 + 5], 0x8E
   355 000003C4 C1E810              <1>  shr eax, 16
   356 000003C7 66A3[66010000]      <1>  mov word [%1 + %2 * 8 + 6], ax
   357 000003CD 58                  <1>  pop eax
   358                                  	SET_INT_DESC _Idt, 45, Int_45
   359 000003CE 50                  <1>  push eax
   360 000003CF B8[3B060000]        <1>  mov eax, %3
   361 000003D4 66A3[68010000]      <1>  mov word [%1 + %2 * 8 + 0], ax
   362 000003DA 66C705[6A010000]08- <1>  mov word [%1 + %2 * 8 + 2], 0x0008
   363 000003E2 00                  <1>
   364 000003E3 C605[6D010000]8E    <1>  mov byte [%1 + %2 * 8 + 5], 0x8E
   365 000003EA C1E810              <1>  shr eax, 16
   366 000003ED 66A3[6E010000]      <1>  mov word [%1 + %2 * 8 + 6], ax
   367 000003F3 58                  <1>  pop eax
   368                                  	SET_INT_DESC _Idt, 46, Int_46
   369 000003F4 50                  <1>  push eax
   370 000003F5 B8[4A060000]        <1>  mov eax, %3
   371 000003FA 66A3[70010000]      <1>  mov word [%1 + %2 * 8 + 0], ax
   372 00000400 66C705[72010000]08- <1>  mov word [%1 + %2 * 8 + 2], 0x0008
   373 00000408 00                  <1>
   374 00000409 C605[75010000]8E    <1>  mov byte [%1 + %2 * 8 + 5], 0x8E
   375 00000410 C1E810              <1>  shr eax, 16
   376 00000413 66A3[76010000]      <1>  mov word [%1 + %2 * 8 + 6], ax
   377 00000419 58                  <1>  pop eax
   378                                  	
   379                                  	SET_INT_DESC _Idt, 48, Int_48
   380 0000041A 50                  <1>  push eax
   381 0000041B B8[59060000]        <1>  mov eax, %3
   382 00000420 66A3[80010000]      <1>  mov word [%1 + %2 * 8 + 0], ax
   383 00000426 66C705[82010000]08- <1>  mov word [%1 + %2 * 8 + 2], 0x0008
   384 0000042E 00                  <1>
   385 0000042F C605[85010000]8E    <1>  mov byte [%1 + %2 * 8 + 5], 0x8E
   386 00000436 C1E810              <1>  shr eax, 16
   387 00000439 66A3[86010000]      <1>  mov word [%1 + %2 * 8 + 6], ax
   388 0000043F 58                  <1>  pop eax
   389                                  
   390                                  	;
   391                                  	; 加载中断描述符表
   392                                  	;
   393 00000440 68[00000000]            	push dword _Idt
   394 00000445 66680008                	push word 2048
   395 00000449 0F011C24                	lidt [esp]
   396 0000044D 81C406000000            	add esp, 6
   397                                  	
   398 00000453 C9                      	leave
   399 00000454 C3                      	ret
   400                                  ;}
   401                                  
   402                                  Exp_0:
   403 00000455 C705[0C080000]0000-     	mov dword [_ErrorCode], 0
   404 0000045D 0000               
   405 0000045F C705[08080000]0000-     	mov dword [_IntNumber], 0
   406 00000467 0000               
   407 00000469 E904020000              	jmp Exception
   408                                  Exp_1:
   409 0000046E C705[0C080000]0000-     	mov dword [_ErrorCode], 0
   410 00000476 0000               
   411 00000478 C705[08080000]0100-     	mov dword [_IntNumber], 1
   412 00000480 0000               
   413 00000482 E9EB010000              	jmp Exception
   414                                  Exp_3:
   415 00000487 C705[0C080000]0000-     	mov dword [_ErrorCode], 0
   416 0000048F 0000               
   417 00000491 C705[08080000]0300-     	mov dword [_IntNumber], 3
   418 00000499 0000               
   419 0000049B E9D2010000              	jmp Exception
   420                                  Exp_4:
   421 000004A0 C705[0C080000]0000-     	mov dword [_ErrorCode], 0
   422 000004A8 0000               
   423 000004AA C705[08080000]0400-     	mov dword [_IntNumber], 4
   424 000004B2 0000               
   425 000004B4 E9B9010000              	jmp Exception
   426                                  Exp_5:
   427 000004B9 C705[0C080000]0000-     	mov dword [_ErrorCode], 0
   428 000004C1 0000               
   429 000004C3 C705[08080000]0500-     	mov dword [_IntNumber], 5
   430 000004CB 0000               
   431 000004CD E9A0010000              	jmp Exception
   432                                  Exp_6:
   433 000004D2 C705[0C080000]0000-     	mov dword [_ErrorCode], 0
   434 000004DA 0000               
   435 000004DC C705[08080000]0600-     	mov dword [_IntNumber], 6
   436 000004E4 0000               
   437 000004E6 E987010000              	jmp Exception
   438                                  Exp_7:
   439 000004EB C705[0C080000]0000-     	mov dword [_ErrorCode], 0
   440 000004F3 0000               
   441 000004F5 C705[08080000]0700-     	mov dword [_IntNumber], 7
   442 000004FD 0000               
   443 000004FF E96E010000              	jmp Exception
   444                                  Exp_8:
   445 00000504 8F05[0C080000]          	pop dword [_ErrorCode]
   446 0000050A C705[08080000]0800-     	mov dword [_IntNumber], 8
   447 00000512 0000               
   448 00000514 E959010000              	jmp Exception
   449                                  Exp_9:
   450 00000519 C705[0C080000]0000-     	mov dword [_ErrorCode], 0
   451 00000521 0000               
   452 00000523 C705[08080000]0900-     	mov dword [_IntNumber], 9
   453 0000052B 0000               
   454 0000052D E940010000              	jmp Exception
   455                                  Exp_10:
   456 00000532 8F05[0C080000]          	pop dword [_ErrorCode]
   457 00000538 C705[08080000]0A00-     	mov dword [_IntNumber], 10
   458 00000540 0000               
   459 00000542 E92B010000              	jmp Exception
   460                                  Exp_11:
   461 00000547 8F05[0C080000]          	pop dword [_ErrorCode]
   462 0000054D C705[08080000]0B00-     	mov dword [_IntNumber], 11
   463 00000555 0000               
   464 00000557 E916010000              	jmp Exception
   465                                  Exp_12:
   466 0000055C 8F05[0C080000]          	pop dword [_ErrorCode]
   467 00000562 C705[08080000]0C00-     	mov dword [_IntNumber], 12
   468 0000056A 0000               
   469 0000056C E901010000              	jmp Exception
   470                                  Exp_13:
   471 00000571 8F05[0C080000]          	pop dword [_ErrorCode]
   472 00000577 C705[08080000]0D00-     	mov dword [_IntNumber], 13
   473 0000057F 0000               
   474 00000581 E9EC000000              	jmp Exception
   475                                  Exp_14:
   476 00000586 8F05[0C080000]          	pop dword [_ErrorCode]
   477 0000058C C705[08080000]0E00-     	mov dword [_IntNumber], 14
   478 00000594 0000               
   479 00000596 E9D7000000              	jmp Exception
   480                                  Exp_16:
   481 0000059B C705[0C080000]0000-     	mov dword [_ErrorCode], 0
   482 000005A3 0000               
   483 000005A5 C705[08080000]1000-     	mov dword [_IntNumber], 16
   484 000005AD 0000               
   485 000005AF E9BE000000              	jmp Exception
   486                                  	
   487                                  Int_32:
   488 000005B4 C705[08080000]2000-     	mov dword [_IntNumber], 32
   489 000005BC 0000               
   490 000005BE E9D2000000              	jmp Interrupt
   491                                  Int_33:
   492 000005C3 C705[08080000]2100-     	mov dword [_IntNumber], 33
   493 000005CB 0000               
   494 000005CD E9C3000000              	jmp Interrupt
   495                                  Int_35:
   496 000005D2 C705[08080000]2300-     	mov dword [_IntNumber], 35
   497 000005DA 0000               
   498 000005DC E9B4000000              	jmp Interrupt
   499                                  Int_36:
   500 000005E1 C705[08080000]2400-     	mov dword [_IntNumber], 36
   501 000005E9 0000               
   502 000005EB E9A5000000              	jmp Interrupt
   503                                  Int_37:
   504 000005F0 C705[08080000]2500-     	mov dword [_IntNumber], 37
   505 000005F8 0000               
   506 000005FA E996000000              	jmp Interrupt
   507                                  Int_38:
   508 000005FF C705[08080000]2600-     	mov dword [_IntNumber], 38
   509 00000607 0000               
   510 00000609 E987000000              	jmp Interrupt
   511                                  Int_39:
   512 0000060E C705[08080000]2700-     	mov dword [_IntNumber], 39
   513 00000616 0000               
   514 00000618 E978000000              	jmp Interrupt
   515                                  Int_40:
   516 0000061D C705[08080000]2800-     	mov dword [_IntNumber], 40
   517 00000625 0000               
   518 00000627 E969000000              	jmp Interrupt
   519                                  Int_44:
   520 0000062C C705[08080000]2C00-     	mov dword [_IntNumber], 44
   521 00000634 0000               
   522 00000636 E95A000000              	jmp Interrupt
   523                                  Int_45:
   524 0000063B C705[08080000]2D00-     	mov dword [_IntNumber], 45
   525 00000643 0000               
   526 00000645 E94B000000              	jmp Interrupt
   527                                  Int_46:
   528 0000064A C705[08080000]2E00-     	mov dword [_IntNumber], 46
   529 00000652 0000               
   530 00000654 E93C000000              	jmp Interrupt
   531                                  	
   532                                  Int_48:
   533 00000659 E859000000              	call IntEnter
   534 0000065E C705[00080000]0100-     	mov dword [_KiIntNesting], 1
   535 00000666 0000               
   536 00000668 6801000000              	push dword 1
   537 0000066D E8E9000000              	call IntExit
   538                                  
   539                                  ;
   540                                  ; 异常处理
   541                                  ;
   542                                  Exception:
   543                                  ;{
   544                                  	;
   545                                  	; 调用中断进入函数，保存被中断的 CPU 现场环境并构造中断堆栈帧
   546                                  	;
   547 00000672 E840000000              	call IntEnter
   548                                  	
   549                                  	;
   550                                  	; 以异常号、错误码、CONTEXT指针为参数，调用异常派遣函数KiDispatchException。
   551                                  	; 注意：KiDispatchException有返回值，返回值的意义如下：
   552                                  	;		0：返回线程时不执行线程调度，直接返回到产生异常的那个线程。
   553                                  	;		非0：返回线程时执行线程调度，返回到调度程序确定应该执行的线程。
   554                                  	;
   555 00000677 50                      	push eax ; eax是IntEnter的返回值，指向产生异常的CONTEXT
   556 00000678 FF35[0C080000]          	push dword [_ErrorCode]
   557 0000067E FF35[08080000]          	push dword [_IntNumber]
   558 00000684 E8(00000000)            	call _KiDispatchException
   559 00000689 81C40C000000            	add esp, 12
   560                                  	
   561                                  	;
   562                                  	; 以KiDispatchException的返回值为参数调用中断返回函数。
   563                                  	;
   564 0000068F 50                      	push eax
   565 00000690 E8C6000000              	call IntExit
   566                                  ;}
   567                                  
   568                                  ;
   569                                  ; 中断处理
   570                                  ;
   571                                  Interrupt:
   572                                  ;{
   573                                  	;
   574                                  	; 调用中断进入函数，保存被中断的 CPU 现场环境并构造中断堆栈帧。
   575                                  	; 然后打开中断（设备中断可嵌套）。
   576                                  	;
   577 00000695 E81D000000              	call IntEnter
   578 0000069A FB                      	sti
   579                                  
   580                                  	;
   581                                  	; 以中断号作为参数调用中断派遣函数（无返回值）
   582                                  	;
   583 0000069B FF35[08080000]          	push dword [_IntNumber]
   584 000006A1 E8(00000000)            	call _KiDispatchInterrupt
   585 000006A6 81C404000000            	add esp, 4
   586                                  
   587                                  	;
   588                                  	; 关中断，然后调用中断返回函数（执行线程调度）
   589                                  	;
   590 000006AC FA                      	cli
   591 000006AD 6801000000              	push dword 1
   592 000006B2 E8A4000000              	call IntExit
   593                                  ;}
   594                                  
   595                                  ;
   596                                  ; 中断进入函数。
   597                                  ;
   598                                  IntEnter:
   599                                  ;{
   600                                  	;
   601                                  	; 取消 call 对 esp 值的影响，并暂存 eax 和 ebx
   602                                  	;
   603 000006B7 8F05[14080000]          	pop dword [_RetAddress]
   604 000006BD A3[18080000]            	mov [_EaxValue], eax
   605 000006C2 891D[1C080000]          	mov [_EbxValue], ebx
   606                                  
   607                                  	;
   608                                  	; 增加中断嵌套深度。
   609                                  	;
   610 000006C8 FF05[00080000]          	inc dword [_KiIntNesting]
   611 000006CE 813D[00080000]0100-     	cmp dword [_KiIntNesting], 1
   612 000006D6 0000               
   613 000006D8 0F8510000000            	jne	.NESTED_INT
   614                                  	
   615                                  	;
   616                                  	; 线程被中断，此时 [_ContextPtr] 指向被中断线程的 CONTEXT。
   617                                  	; 使 ebx 指向中断栈的基址，eax 指向线程的 CONTEXT。
   618                                  	;
   619 000006DE 8B1D[04080000]          	mov ebx, [_KeIsrStack]
   620 000006E4 A1[10080000]            	mov eax, [_ContextPtr]
   621 000006E9 E90A000000              	jmp .SAVE_CONTEXT
   622                                  	
   623                                  	
   624                                  .NESTED_INT:
   625                                  	;
   626                                  	; 嵌套中断，在当前中断栈顶开辟 CONTEXT 空间。
   627                                  	; 使 ebx 指向深度增加后的栈顶，eax 指向栈中的 CONTEXT。
   628                                  	;
   629 000006EE 89E3                    	mov ebx, esp
   630 000006F0 81EB40000000            	sub ebx, CONTEXT_SIZE
   631 000006F6 89D8                    	mov eax, ebx
   632                                  
   633                                  .SAVE_CONTEXT:
   634                                  	;
   635                                  	; 将 CPU 现场保存到 eax 指向的 CONTEXT 结构体中
   636                                  	;
   637 000006F8 894804                  	mov [eax + OFF_ECX], ecx
   638 000006FB 8B0D[18080000]          	mov ecx, [_EaxValue]
   639 00000701 8908                    	mov [eax + OFF_EAX], ecx
   640 00000703 8B0D[1C080000]          	mov ecx, [_EbxValue]
   641 00000709 89480C                  	mov [eax + OFF_EBX], ecx	
   642 0000070C 895008                  	mov [eax + OFF_EDX], edx
   643 0000070F 896010                  	mov [eax + OFF_ESP], esp
   644 00000712 896814                  	mov [eax + OFF_EBP], ebp
   645 00000715 897018                  	mov [eax + OFF_ESI], esi
   646 00000718 89781C                  	mov [eax + OFF_EDI], edi
   647                                  	
   648 0000071B 31C9                    	xor ecx, ecx
   649 0000071D 668CD9                  	mov cx, ds
   650 00000720 894830                  	mov [eax + OFF_DS], ecx
   651 00000723 668CC1                  	mov cx, es
   652 00000726 894834                  	mov [eax + OFF_ES], ecx
   653 00000729 668CE1                  	mov cx, fs
   654 0000072C 894838                  	mov [eax + OFF_FS], ecx
   655 0000072F 668CE9                  	mov cx, gs
   656 00000732 89483C                  	mov [eax + OFF_GS], ecx
   657 00000735 668CD1                  	mov cx, ss
   658 00000738 89482C                  	mov [eax + OFF_SS], ecx
   659                                  	
   660 0000073B 8F4020                  	pop dword [eax + OFF_EIP]
   661 0000073E 8F4028                  	pop dword [eax + OFF_CS]
   662 00000741 8F4024                  	pop dword [eax + OFF_EFLAGS]
   663                                  	
   664 00000744 896010                  	mov [eax + OFF_ESP], esp
   665                                  	
   666                                  	;
   667                                  	; 在 ebx 指向的位置构造一个最外层调用帧
   668                                  	;
   669 00000747 89DC                    	mov esp, ebx
   670 00000749 6800000000              	push dword 0	; ret address of call instruction
   671 0000074E 6800000000              	push dword 0	; old value of ebp (push ebp)
   672 00000753 89E5                    	mov ebp, esp
   673                                  
   674                                  	;
   675                                  	; 返回
   676                                  	;
   677 00000755 FF25[14080000]          	jmp dword [_RetAddress]	
   678                                  ;}
   679                                  
   680                                  ;
   681                                  ; 中断退出函数。
   682                                  ;
   683                                  IntExit:
   684                                  ;{
   685 0000075B FA                      	cli
   686 0000075C 55                      	push ebp
   687 0000075D 89E5                    	mov ebp, esp
   688                                  
   689                                  	;
   690                                  	; 如果中断嵌套计数器为1则返回到线程，否则返回到被嵌套中断。
   691                                  	;
   692 0000075F 813D[00080000]0100-     	cmp dword [_KiIntNesting], 1
   693 00000767 0000               
   694 00000769 0F840D000000            	je .RETURN_TO_THREAD
   695                                  
   696                                  	;
   697                                  	; 返回到被嵌套中断，使EAX指向保存在中断栈中的CONTEXT结构体。
   698                                  	;
   699 0000076F 8B4500                  	mov eax, [ebp]
   700 00000772 0508000000              	add eax, 8
   701 00000777 E921000000              	jmp .RESTORE_CONTEXT
   702                                  
   703                                  .RETURN_TO_THREAD:
   704                                  	;
   705                                  	; 根据参数确定是否执行线程调度，如果需要调度则返回到调度程序确定的
   706                                  	; 下一个应该该运行的线程，否则返回到被中断线程。
   707                                  	;
   708 0000077C 817D0800000000          	cmp dword [ebp + 8], 0
   709 00000783 0F850A000000            	jne .SELECT_NEXT_THREAD
   710                                  
   711                                  	;
   712                                  	; 不调度，使EAX指向被中断的线程的CONTEXT结构体。
   713                                  	;
   714 00000789 A1[10080000]            	mov eax, [_ContextPtr]
   715 0000078E E90A000000              	jmp .RESTORE_CONTEXT
   716                                  
   717                                  .SELECT_NEXT_THREAD:
   718                                  	;
   719                                  	; 调用PspSelectNextThread，其返回下一个应该运行线程的CONTEXT指针。
   720                                  	; 注意：要保存指针值到[_ContextPtr]，当线程被中断时还将使用。
   721                                  	;
   722 00000793 E8(00000000)            	call _PspSelectNextThread
   723 00000798 A3[10080000]            	mov [_ContextPtr], eax
   724                                  
   725                                  .RESTORE_CONTEXT:
   726                                  	;
   727                                  	; 恢复 CPU 环境为 EAX 指向的 CONTEXT
   728                                  	;
   729 0000079D 8B580C                  	mov ebx, [eax + OFF_EBX]
   730 000007A0 8B4804                  	mov ecx, [eax + OFF_ECX]
   731 000007A3 8B5008                  	mov edx, [eax + OFF_EDX]
   732 000007A6 8B781C                  	mov edi, [eax + OFF_EDI]
   733 000007A9 8B7018                  	mov esi, [eax + OFF_ESI]
   734 000007AC 8B6814                  	mov ebp, [eax + OFF_EBP]
   735 000007AF 8B6010                  	mov esp, [eax + OFF_ESP]
   736                                  	
   737 000007B2 8E5830                  	mov ds, [eax + OFF_DS]
   738 000007B5 8E4034                  	mov es, [eax + OFF_ES]
   739 000007B8 8E6038                  	mov fs, [eax + OFF_FS]
   740 000007BB 8E683C                  	mov gs, [eax + OFF_GS]
   741 000007BE 8E502C                  	mov ss, [eax + OFF_SS]
   742                                  	
   743 000007C1 FF7024                  	push dword [eax + OFF_EFLAGS]
   744 000007C4 FF7028                  	push dword [eax + OFF_CS]
   745 000007C7 FF7020                  	push dword [eax + OFF_EIP]
   746                                  	
   747 000007CA 8B00                    	mov eax, [eax + OFF_EAX]
   748                                  
   749                                  	; 减少中断嵌套深度。
   750 000007CC FF0D[00080000]          	dec dword [_KiIntNesting]
   751                                  	
   752                                  	; 中断返回，开始执行选中的线程。
   753 000007D2 CF                      	iret
   754                                  ;}
   755                                  
   756                                  _KeGetIntNesting:
   757                                  ;{
   758 000007D3 55                      	push ebp
   759 000007D4 89E5                    	mov ebp, esp
   760                                  
   761 000007D6 A1[00080000]            	mov eax, [_KiIntNesting]
   762                                  
   763 000007DB C9                      	leave
   764 000007DC C3                      	ret
   765                                  ;}
